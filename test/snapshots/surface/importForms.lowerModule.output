{
  surface: {
    name: 'Main',
    exports: Nothing {},
    imports: [
      {
        annotation: { id: 0 },
        name: 'A',
        importList: Nothing {},
        qualified: Nothing {}
      },
      {
        annotation: { id: 1 },
        name: 'B',
        importList: Just {
          value0: { hiding: false, imports: [ ImportValue { value0: 'b' } ] }
        },
        qualified: Nothing {}
      },
      {
        annotation: { id: 2 },
        name: 'C',
        importList: Nothing {},
        qualified: Just { value0: 'C' }
      },
      {
        annotation: { id: 3 },
        name: 'D',
        importList: Just {
          value0: { hiding: false, imports: [ ImportValue { value0: 'd' } ] }
        },
        qualified: Just { value0: 'D' }
      },
      {
        annotation: { id: 4 },
        name: 'E',
        importList: Just {
          value0: { hiding: true, imports: [ ImportValue { value0: 'e' } ] }
        },
        qualified: Nothing {}
      },
      {
        annotation: { id: 5 },
        name: 'F',
        importList: Just {
          value0: { hiding: true, imports: [ ImportValue { value0: 'f' } ] }
        },
        qualified: Just { value0: 'F' }
      }
    ],
    declarations: []
  },
  sourceRanges: {
    expr: MapNode { datamap: 0, nodemap: 0, content: [] },
    binder: MapNode { datamap: 0, nodemap: 0, content: [] },
    type: MapNode { datamap: 0, nodemap: 0, content: [] },
    doStatement: MapNode { datamap: 0, nodemap: 0, content: [] },
    letBinding: MapNode { datamap: 0, nodemap: 0, content: [] },
    declaration: MapNode { datamap: 0, nodemap: 0, content: [] },
    constructor: MapNode { datamap: 0, nodemap: 0, content: [] },
    newtype: MapNode { datamap: 0, nodemap: 0, content: [] },
    classMethod: MapNode { datamap: 0, nodemap: 0, content: [] },
    typeVarBinding: MapNode { datamap: 0, nodemap: 0, content: [] },
    moduleImport: MapNode { datamap: 0, nodemap: 0, content: [] }
  },
  recoveredErrors: {
    expr: MapNode { datamap: 0, nodemap: 0, content: [] },
    binder: MapNode { datamap: 0, nodemap: 0, content: [] },
    type: MapNode { datamap: 0, nodemap: 0, content: [] },
    doStatement: MapNode { datamap: 0, nodemap: 0, content: [] },
    letBinding: MapNode { datamap: 0, nodemap: 0, content: [] },
    declaration: MapNode { datamap: 0, nodemap: 0, content: [] }
  }
}